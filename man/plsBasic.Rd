% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plsFuncs.R
\name{plsBasic}
\alias{plsBasic}
\title{Computes regularized preconditioned least squares}
\usage{
plsBasic(X, Y, compression = c("qxqy", "qxy"), rand = "rsparseBern",
  q = NULL, regTerm = c("Ident"), Q = NULL, lam = 0, ...)
}
\arguments{
\item{X}{the design matrix}

\item{Y}{the response vector}

\item{compression}{either full compression ('qxqy') or partial
compression ('qxy')}

\item{rand}{random number generator to build the compression matrix}

\item{q}{columns in the compression matrix}

\item{regTerm}{determines how the regularization is imposed, default is ridge-like (\code{'Ident'}). See details below.}

\item{Q}{pass along an existing Q matrix?}

\item{lam}{the amount of regularization}

\item{...}{optional arguments to the random number generator}
}
\value{
a list with components \code{bhat} (the
 coefficient vector), \code{hatmat} (the smoothing
 matrix), and \code{df} (the degrees of freedom, trace of \code{hatmat}).
}
\description{
This is the main function in this package. It computes different forms of compressed least squares regression.
}
\details{
This function implements two different compression algorithms with
different regularization versions. The notation here uses \eqn{||.||} to be the standard Euclidean norm. Full compression \code{compression='qxqy'}
is the solution to
\deqn{min||Q(Y-Xb)||^2 = min -Y'Q'QXb + b'X'Q'QXb = (X'Q'QX)^{-1}X'Q'QY.}
Partial compression simply ignores the \eqn{Q'Q} term between \eqn{X'} and \eqn{Y}: \deqn{min -Y'Q'QXb + b'X'Q'QXb = (X'Q'QX)^{-1}X'Y.}

Either version can be regularized by adding a ridge penalty
\eqn{\lambda ||b||^2} to the optimization problem. However, one can iterpret
standard ridge regression as data augmentation, extending Y with p zeros and
similarly extending X with \eqn{\lambda I}. With this interpretation, we would
compress the extension as well either fully or partially. Therefore, the
\code{regTerm} can be \code{'Ident'} (standard case), \code{'QtQ'} (data
augmentation version), or \code{'zero'} (no regularization).
}
\examples{
n = 100
p = 5
q = 50
X = generateX(100, diag(1,10), 'rnorm')
Y = generateY(100, 10:1, 'rnorm')
bhat = plsBasic(X, Y, 'qxqy', q=q, regTerm='Ident', lam=1)
}

